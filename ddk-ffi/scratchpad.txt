 // Creates a set of DLC transactions (fund, CETs, refund)
    [Throws=DLCError]
    DlcTransactions create_dlc_transactions(
        PartyParams offer_params,
        PartyParams accept_params,
        sequence<Payout> payouts,
        u32 refund_lock_time,
        u64 fee_rate_per_vb,
        u32 fund_lock_time,
        u32 cet_lock_time,
        u64 fund_output_serial_id
    );

    // Creates a single Contract Execution Transaction
    [Throws=DLCError]
    Transaction create_cet(
        TxOutput local_output,
        TxOutput remote_output,
        string fund_tx_id,
        u32 fund_vout,
        u32 lock_time,
        u64 local_serial_id,
        u64 remote_serial_id
    );

    // Creates multiple CETs for different outcomes
    [Throws=DLCError]
    sequence<Transaction> create_cets(
        string fund_tx_id,
        u32 fund_vout,
        sequence<u8> local_final_script_pubkey,
        sequence<u8> remote_final_script_pubkey,
        sequence<DlcOutcome> outcomes,
        u32 lock_time,
        u64 local_serial_id,
        u64 remote_serial_id
    );

    // Creates the funding transaction locking script (2-of-2 multisig)
    [Throws=DLCError]
    sequence<u8> create_fund_tx_locking_script(
        sequence<u8> local_fund_pubkey,
        sequence<u8> remote_fund_pubkey
    );

    // Creates a funding transaction
    [Throws=DLCError]
    Transaction create_fund_transaction(
        sequence<u8> local_fund_pubkey,
        sequence<u8> remote_fund_pubkey,
        u64 output_amount,
        sequence<TxInputInfo> local_inputs,
        TxOutput local_change_output,
        sequence<TxInputInfo> remote_inputs,
        TxOutput remote_change_output,
        string? option_dest,
        u64 option_premium,
        u32 lock_time,
        u64 local_serial_id,
        u64 remote_serial_id,
        u64 fund_output_serial_id
    );

    // Creates a refund transaction
    [Throws=DLCError]
    Transaction create_refund_transaction(
        sequence<u8> local_final_script_pubkey,
        sequence<u8> remote_final_script_pubkey,
        u64 local_amount,
        u64 remote_amount,
        u32 lock_time,
        string fund_tx_id,
        u32 fund_vout
    );

    // Signs a funding transaction input
    [Throws=DLCError]
    void sign_fund_transaction_input(
        Transaction fund_transaction,
        sequence<u8> privkey,
        string prev_tx_id,
        u32 prev_tx_vout,
        u64 value
    );

    // Adds a signature to a funding transaction
    [Throws=DLCError]
    void add_signature_to_fund_transaction(
        Transaction fund_transaction,
        sequence<u8> signature,
        sequence<u8> pubkey,
        string prev_tx_id,
        u32 prev_tx_vout
    );

    // Verifies a funding transaction signature
    [Throws=DLCError]
    boolean verify_fund_tx_signature(
        Transaction fund_tx,
        sequence<u8> signature,
        sequence<u8> pubkey,
        string txid,
        u32 vout,
        u64 input_amount
    );

    // Creates a CET adaptor signature
    [Throws=DLCError]
    AdaptorSignature create_cet_adaptor_signature(
        Transaction cet,
        sequence<u8> oracle_pubkey,
        sequence<sequence<u8>> oracle_r_values,
        sequence<u8> funding_privkey,
        sequence<u8> funding_script_pubkey,
        u64 total_collateral,
        sequence<sequence<u8>> messages
    );

    // Creates multiple CET adaptor signatures
    [Throws=DLCError]
    sequence<AdaptorSignature> create_cet_adaptor_signatures(
        sequence<Transaction> cets,
        sequence<u8> oracle_pubkey,
        sequence<sequence<u8>> oracle_r_values,
        sequence<u8> funding_privkey,
        sequence<u8> funding_script_pubkey,
        u64 total_collateral,
        sequence<sequence<sequence<u8>>> messages
    );

    // Verifies a CET adaptor signature
    [Throws=DLCError]
    boolean verify_cet_adaptor_signature(
        AdaptorSignature adaptor_sig,
        Transaction cet,
        sequence<u8> pubkey,
        sequence<u8> oracle_pubkey,
        sequence<sequence<u8>> oracle_r_values,
        sequence<u8> funding_script_pubkey,
        u64 total_collateral,
        sequence<sequence<u8>> messages
    );

    // Verifies multiple CET adaptor signatures
    [Throws=DLCError]
    boolean verify_cet_adaptor_signatures(
        sequence<Transaction> cets,
        sequence<AdaptorSignature> adaptor_sigs,
        sequence<sequence<sequence<u8>>> messages,
        sequence<u8> pubkey,
        sequence<u8> oracle_pubkey,
        sequence<sequence<u8>> oracle_r_values,
        sequence<u8> funding_script_pubkey,
        u64 total_collateral
    );

    // Signs a CET with oracle signatures
    [Throws=DLCError]
    void sign_cet(
        Transaction cet,
        AdaptorSignature adaptor_sig,
        sequence<sequence<u8>> oracle_signatures,
        sequence<u8> funding_privkey,
        sequence<u8> funding_script_pubkey,
        string fund_tx_id,
        u32 fund_vout,
        u64 fund_amount
    );

    // Gets raw funding transaction input signature
    [Throws=DLCError]
    sequence<u8> get_raw_funding_transaction_input_signature(
        Transaction funding_transaction,
        sequence<u8> privkey,
        string prev_tx_id,
        u32 prev_tx_vout,
        u64 value
    );

    // Adds signatures for multisig input
    [Throws=DLCError]
    void add_signatures_for_multisig_input(
        Transaction transaction,
        string prev_tx_id,
        u32 prev_tx_vout,
        sequence<u8> multisig_script,
        sequence<sequence<u8>> signatures
    );

    // Adds signatures to refund transaction
    [Throws=DLCError]
    void add_signatures_to_refund_tx(
        Transaction refund_tx,
        sequence<u8> fund_lockscript,
        sequence<sequence<u8>> signatures,
        string fund_tx_id,
        u32 fund_tx_vout
    );

    // Gets raw refund transaction signature
    [Throws=DLCError]
    sequence<u8> get_raw_refund_tx_signature(
        Transaction refund_tx,
        sequence<u8> privkey,
        sequence<u8> fund_lockscript,
        u64 input_amount,
        string fund_tx_id,
        u32 fund_tx_vout
    );

    // Verifies refund transaction signature
    [Throws=DLCError]
    boolean verify_refund_tx_signature(
        Transaction refund_tx,
        sequence<u8> signature,
        sequence<u8> pubkey,
        sequence<u8> lock_script,
        u64 input_amount,
        string fund_txid,
        u32 fund_vout
    );

    // Utility: Calculate total input virtual size
    u32 get_total_input_vsize(sequence<TxInput> inputs);

    // Utility: Check if output is dust
    boolean is_dust_output(TxOutput output);

    // Utility: Get change output and fees for a party
    [Throws=DLCError]
    ChangeOutputAndFees get_change_output_and_fees(
        PartyParams params,
        u64 fee_rate,
        u64? extra_fee
    );

    // Compute adaptor point from messages and oracle info
    [Throws=DLCError]
    sequence<u8> compute_adaptor_point(
        sequence<sequence<u8>> messages,
        sequence<sequence<u8>> r_values,
        sequence<u8> oracle_pubkey
    );